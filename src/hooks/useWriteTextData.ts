export interface IWriteData {
    id: number;
    category: string;
    title: string;
    date: string;
    img: string;
    content: string;
}

export type IDataContainer = {
    posts: Array<IWriteData>;
};

export const data = {
    posts: [
        {
            id: 1,
            category: 'dev',
            title: 'Mock Data Grid',
            date: '2021년 12월 11일 00:21',
            img: 'https://studiomeal.com/wp-content/uploads/2020/01/07-2.jpg',
            content: `
            CSS 레이아웃의 끝판왕이라고 할 수 있는 Grid(그리드) 튜토리얼에 잘 오셨습니다!
            앞서 공부한 Flex와 지금 공부할 Grid의 큰 차이점은
                
            Flex는 한 방향 레이아웃 시스템이고 (1차원)
            Grid는 두 방향(가로-세로) 레이아웃 시스템 (2차원)이라는 점입니다.
                
            따라서 Flex보다 더 복합적인 레이아웃 표현이 가능하지요.
            참고로 지금 보고 계신 이 1분코딩 웹사이트는 전체적인 레이아웃은 Grid로 잡았고, 부분 부분에 Flex와 Grid를 적절히 사용해 주었습니다.
                
            부모 요소인 div.container를 Grid Container(그리드 컨테이너)라고 부르고,
            자식 요소인 div.item들을 Grid Item(그리드 아이템)이라고 부릅니다.
            “컨테이너가 Grid의 영향을 받는 전체 공간이고, 설정된 속성에 따라 각각의 아이템들이 어떤 형태로 배치되는 것”이라고 생각하시면 됩니다.
                
            Flex와 마찬가지로, Grid는 컨테이너에 display: grid; 를 설정하는 것으로 시작합니다.
            `,
        },
        {
            id: 2,
            category: 'jounal',
            title: 'Mock Data Item',
            date: '2021년 12월 11일 02:16',
            img: 'https://cms-assets.tutsplus.com/uploads/users/30/posts/33545/preview_image/tailwind-pre.png',
            content: `
            현재 프론트엔드에는 정말 많은 CSS 프레임워크가 있죠.
            전 Bootstrap, PureCSS, BulmaCSS 정도를 써 봤는데, 모두 훌륭하지만 디자인을 커스터마이징을 할때 불편함이 남는다는 것이 약간 아쉬웠더랬습니다.
                    
            그런데 Tailwind CSS를 썼을 때는 그런 부분에 대한 아쉬움이 전혀 없었습니다. 정말 편했죠.
                    
            다만 한글 자료가 살짝 부족하다는 느낌이 들었고, 그래서 Tailwind CSS의 기초적인 사용에 대해서 정리해보고자 합니다.
                    
            소개
            기존의 CSS 프레임워크들은 대부분 미리 정해진 디자인의 component들이 있고, 그 컴포넌트들을 가져다 사용하는 방식이었습니다. 정해진 디자인을 구성할 때는 빠르고 효율적입니다. 하지만 개발자가 원하는 형태의 디자인을 적용할 때는 많은 애로사항이 꽃피게 됩니다.
                    
            Tailwind는 컴포넌트 위주의 디자인 대신 HTML 문서에 저수준의 유틸리티 클래스를 정의하는 것으로 디자인을 구성할 수 있습니다. 물론 부트스트랩같이 기존 디자인을 빠르게 가져와서 구성할 수는 없겠지만, 커스터마이징이 아주 편하고, 직관적이기 때문에 CSS를 직접 다루는 것을 선호하는 개발자에게 좋은 선택지로 생각됩니다.
            `,
        },
        {
            id: 3,
            category: 'jounal',
            title: 'Mock Data Item Two',
            date: '2021년 12월 12일 09:44',
            img: 'https://www.india-briefing.com/news/wp-content/uploads/2019/08/Import-and-Export-Procedures-in-India.jpg',
            content: `
            네이비씰에서 강조하는 '극한의 오너십' 정신이 무엇이고 왜 필요한가를 일상에서 몸소 깨져가며 배우는 요즘이다. <네이비씰 승리의 기술>을 읽을 때 충분히 이해하고 동의하며 읽었다고 생각했는데 지금 와서 보니 턱도 없었다.

            최근에 팀에서 서로의 감정이 상하는 일이 있었다. 이 상황이 벌어졌을 때 무의식적으로 미묘하게 환경 탓을 하거나 자기합리화 혹은 남 탓을 하는 나를 발견했다. 말로는 나의 부족한 점 때문에 생긴 일 같으니 피드백을 받아보고 싶다고 했지만 마음 깊숙한 곳에서는 방어적인 대처를 하고 있음을 알게 되었다. 나의 못난 모습을 솔직하게 직면하는 편이라고 자부해왔는데 불투명한 방식으로 회피할 때가 있음을 깨닫게 된 순간이었다.

            다행히도 최근 있었던 일에서는 당사자인 동료가 메타적으로 솔직하고 예리하게 문제가 되는 지점과 내가 더 잘해야만 했던/하는 지점에 대해 말해줄 수 있는 사람이었고, 이 상황을 원활하게 해결할 수 있도록 같이 뛰어주는 동료도 있었다. 게다가 이 동료들은 내가 더 나아질 수 있는 사람이라고 믿어주고, 그럴 수 있도록 도와주고, 기다려줄 수 있는 사람들이었다.

            그 덕분에 문제가 무엇인지 깨닫고, 인정하기에는 너무너무 자존심 상하는 매운맛 피드백을 안전한 마음으로 받아들일 수 있었다. 물론 처음에는 위에서 말한 것과 같이 방어적인 마음부터 튀어 올랐지만 이야기하는 자리가 끝나갈 쯤에는 이를 받아들이고 앞으로 무엇을 해야 할지 고민하기 시작했다.

            훌륭한 동료들 덕에 직면하기 힘든 피드백을 뼈아프지만 진심으로 인정하고 받아들이는 경험을 했다. 피드백을 듣는 순간에는 쒸익쒸익하거나 자존심이나 기분이 상하는 건 나 또한 한낱 사람인 이상 어쩔 수 없지만 그런 마음을 잘 인지하고 무엇을 해야 하는지 고민하는 기회로 삼는다면 문제를 해결하고 개선하기 위한 동력이 되어줄 것이다. 이런 마음을 가지게 만드는 동료들이 곁에 있고 나를 위해 이런 피드백을 주는 용기를 내준 것에 감사할 따름이다.
            `,
        },
        {
            id: 4,
            category: 'dev',
            title: 'Mock Data Item',
            date: '2021년 12월 13일 01:06',
            img: 'https://www.saloodo.com/wp-content/uploads/2021/09/import-2.png',
            content: `
            누군가에게 나를 이해시키는 일은 어렵다. 나도 나를 100% 다 이해하지 못하는데 다른 사람은 오죽할까. 그렇지만 나는 너무나도 간절하게 누군가에게 이해받고 싶다. 지금의 내가 어떤 사람인지, 어떤 과정을 통해 이런 사람이 되었는지를 꼭꼭 씹어 이해해 주길 바란다.

            여러 시간을 함께했던 사람이 나의 일부를 이해하는 것 같다고 느낄 때 가슴이 뭉클해지며 안도감을 느낀다. 뭉클함과 안도감 사이에서 따뜻한 눈물이 찔끔 나올 때도 있다. 눈물이 가실 때쯤에는 나 또한 그 사람을 더 많이 이해해 보고 싶어진다. 그 어느 때보다도 안전한 애정을 느끼는 순간이다.

            반대로 내가 소중하게 생각하는 사람이 나를 이해하지 못하는 것 같을 때 마음이 한없이 아리며 외로워진다. 머리로는 타인이 나를 온전히 이해한다는 것은 불가능하다고 되뇌지만 이미 서글퍼진 마음은 계속해서 가라앉으며 외로움의 골에서 쉽게 나오지 못한다.

            이런 순간에는 차라리 혼자인 게 나을 것 같다는 생각을 한다. 혼자일 때 외로운 건 왠지 온당한 것 같은데, 함께 있는데 외로운 건 잘못된 것 같다는 느낌이 들기에 혼자라서 외로울 때 이상으로 괴롭다. 하지만 막상 혼자가 되면 이렇게 늘 외로운 것보다는 차라리 함께 있으면서 가끔씩 사무치게 외로운 날이 있는 게 낫다고 생각할 것이다.

            이런 생각을 하다 보면 다른 사람에게 이해받아야만 행복할 수 있는지 궁금해진다. 그런 사람이 되고 싶지는 않다. 내가 나를 이해해주는 것만으로도 내 삶이 충만하기를 바란다. 어쩌다 나를 이해해주는 사람을 만나면 마음껏 감동하고 반가워하고 싶고, 오랜 기간 만나지 못하면 아쉬울 수는 있겠지만 무너지지는 않고 싶다.

            최근에는 남자친구랑 대화를 하다가 이해받지 못한다고 느낄 때가 있었다. 지금의 내가 가지는 생각과 고민을 피곤하다고 느끼며 해결책을 쉽게 얘기하는 것 같다는 느낌을 받았었다. 답답한 마음과 나에게는 이게 왜 중요한지를 제대로 이해시키고 싶은 마음에 냉정한 투로 그 조언은 나에게 전혀 도움이 되지 않는다고 대꾸하며 내 입장을 늘어놓았다. 그런 내 말에 남자친구도 기분이 상해버렸다.

            그러고 나서 잠시 서로 왜 기분이 상했는지를 얘기했지만 결국은 찜찜하고 어색하게 대화가 끝났고 각자 집으로 헤어졌다. 그리고 나는 잠들려고 노력했지만 잠들지 못했다.

            나랑 비슷한 경험과 상처를 가진 사람한테만 나를 이해받을 수 있는 건가. 그렇다기에는 지금 내 남자친구는 여태껏 나를 너무나 자주, 크게 뭉클하게 만들어왔는 걸. 그런 사람인데 방금은 왜 이해하지 못 했던 걸까. 내가 평소보다 잘 전달하지 못했던 게 있나. 이런저런 생각이 끊이지 않았다.

            머리로는 지금 내가 과대해석하고 있다는 것을 알았다. 반드시 남에게 이해받을 필요가 없다는 것도 알았다. 하지만 마음은 머리는 이해한 사실을 받아들이지 못했다. 마음이 계속해서 찌잉찌잉 울려댔다. 그날은 쏟아지는 생각과 가슴의 묵직함 때문에 가지고 있던 에너지를 완전히 방전하고서야 잠들 수 있었다.
            `,
        },
    ],
};
